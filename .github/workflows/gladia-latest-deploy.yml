name: Gladia Promote & deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: false

env:
  TAG_PROMOTED: ci-${{ github.event.pull_request.number }}
  TAG_PROMOTE: latest
  
jobs:

  promote-gladia-image:
    runs-on: [self-hosted, linux, STD]
    if: github.event.pull_request.merged == true
    env:
      REGISTRY_URL: https://${DOCKER_GLADIA_FQDN}
      CONTENT_TYPE: application/vnd.docker.distribution.manifest.v2+json
    steps:
      - name: Promote *gladia-base* image to Gladia Registry
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: build-base')
        env:
          REPOSITORY: gladia-base
        run: |
          MANIFEST=$(curl -u ${DOCKER_GLADIA_USERNAME}:${DOCKER_GLADIA_ACCESS_TOKEN} -H "Accept: ${{ env.CONTENT_TYPE }}" "${{ env.REGISTRY_URL }}/v2/${{ env.REPOSITORY }}/manifests/${{ env.TAG_PROMOTED }}")
          curl -u ${DOCKER_GLADIA_USERNAME}:${DOCKER_GLADIA_ACCESS_TOKEN} -X PUT -H "Content-Type: ${{ env.CONTENT_TYPE }}" -d "${MANIFEST}" "${{ env.REGISTRY_URL }}/v2/${{ env.REPOSITORY }}/manifests/${{ env.TAG_PROMOTE }}"

      - name: Promote *gladia* image to Gladia Registry
        env:
          REPOSITORY: gladia
        run: |
          MANIFEST=$(curl -u ${DOCKER_GLADIA_USERNAME}:${DOCKER_GLADIA_ACCESS_TOKEN} -H "Accept: ${{ env.CONTENT_TYPE }}" "${{ env.REGISTRY_URL }}/v2/${{ env.REPOSITORY }}/manifests/${{ env.TAG_PROMOTED }}")
          curl -u ${DOCKER_GLADIA_USERNAME}:${DOCKER_GLADIA_ACCESS_TOKEN} -X PUT -H "Content-Type: ${{ env.CONTENT_TYPE }}" -d "${MANIFEST}" "${{ env.REGISTRY_URL }}/v2/${{ env.REPOSITORY }}/manifests/${{ env.TAG_PROMOTE }}"

  promote-gladia-to-DH:
    needs: promote-gladia-image
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Promote *gladia-base* image to DH Registry
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: build-base')
        run: |
          docker pull ${DOCKER_GLADIA_FQDN}/gladia-base:${{ env.TAG_PROMOTE }} &&
          docker tag ${DOCKER_GLADIA_FQDN}/gladia-base:${{ env.TAG_PROMOTE }} gladiaio/gladia-base:latest &&
          docker push gladiaio/gladia-base:latest

      - name: Promote *gladia* image to DH Registry
        run: |
          docker pull ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }} &&
          docker tag ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }} gladiaio/gladia:latest &&
          docker push gladiaio/gladia:latest

  deploy-aipi-1:
    needs: promote-gladia-image
    runs-on: [self-hosted, linux, aipi-1]
    steps:
      - name: pull gladia image
        run: docker pull ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }}

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --restart unless-stopped \
            --gpus all --shm-size=5g \
            -p ${AIPI_SERVICE_PORT}:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${env.TRITON_SERVER_URL} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${HUGGINGFACE_ACCESS_TOKEN} \
            -e STABILITY_KEY=${STABILITY_KEY} \
            -e MODE=server \
            ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }}

      - name: Gladia AIPI-1 readiness
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 5
          max_attempts: 60
          retry_on: error
          command: curl localhost:${AIPI_SERVICE_PORT}/${AIPI_READINESS_PATH} --connect-timeout 5

  deploy-aipi-2:
    needs: deploy-aipi-1
    runs-on: [self-hosted, linux, aipi-2]
    steps:
      - name: pull gladia image
        run: docker pull ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }}

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --restart unless-stopped \
            --gpus all --shm-size=5g \
            -p ${AIPI_SERVICE_PORT}:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${TRITON_SERVER_URL} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${HUGGINGFACE_ACCESS_TOKEN} \
            -e STABILITY_KEY=${STABILITY_KEY} \
            -e MODE=server \
            ${DOCKER_GLADIA_FQDN}/gladia:${{ env.TAG_PROMOTE }}

      - name: Gladia AIPI-2 readiness
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 5
          max_attempts: 60
          retry_on: error
          command: curl localhost:${AIPI_SERVICE_PORT}/${AIPI_READINESS_PATH} --connect-timeout 5