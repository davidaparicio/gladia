name: Gladia Promote & deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      pr:
        description: 'Force promote & deploy this PR'
        required: true

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: false

env:
  TAG_PROMOTED: ""
  TAG_PROMOTE: latest
  TAG: ${{ inputs.pr }}
  
jobs:

  promote-gladia-image:
    runs-on: [self-hosted, build, ephemeral]
    if: ${{ (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch') }}
    env:
      REGISTRY_URL: https://${DOCKER_GLADIA_FQDN}
    steps:
      - name: Assert Image, TAG and NS
        run: |
          if [ "$TAG" == "" ]; then
            echo "TAG_PROMOTED=ci-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "TAG_PROMOTED=ci-$TAG" >> $GITHUB_ENV
          fi

      - name: Promote *gladia-base* image to Gladia Registry
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: build-base')
        env:
          REPOSITORY: base
        run: |
          MANIFEST=$(curl -ns -X GET "https://${DOCKER_GLADIA_FQDN}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/${{ env.TAG_PROMOTED }}/tags" | sed "s/${{ env.TAG_PROMOTED }}/latest/g" | tr -d "[]")
          curl -n -X DELETE "${{ env.REGISTRY_URL }}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/latest/tags/latest"
          curl -n -X POST "${{ env.REGISTRY_URL }}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/${{ env.TAG_PROMOTED }}/tags" -H "Content-Type: application/json" -d "${MANIFEST}"

      - name: Promote *gladia* image to Gladia Registry
        env:
          REPOSITORY: gladia
        run: |
          MANIFEST=$(curl -ns -X GET "https://${DOCKER_GLADIA_FQDN}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/${{ env.TAG_PROMOTED }}/tags" | sed "s/${{ env.TAG_PROMOTED }}/latest/g" | tr -d "[]")
          curl -n -X DELETE "${{ env.REGISTRY_URL }}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/latest/tags/latest"
          curl -n -X POST "${{ env.REGISTRY_URL }}/api/v2.0/projects/gladia/repositories/${{ env.REPOSITORY }}/artifacts/${{ env.TAG_PROMOTED }}/tags" -H "Content-Type: application/json" -d "${MANIFEST}"

  promote-gladia-to-DH:
    needs: promote-gladia-image
    runs-on: [self-hosted, build, persist]
    steps:
      - name: Promote *gladia-base* image to DH Registry
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: build-base')
        run: |
          docker pull ${DOCKER_GLADIA_FQDN}/gladia/base:${{ env.TAG_PROMOTE }} &&
          docker tag ${DOCKER_GLADIA_FQDN}/gladia/base:${{ env.TAG_PROMOTE }} gladiaio/gladia-base:latest &&
          docker push gladiaio/gladia-base:latest

      - name: Promote *gladia* image to DH Registry
        run: |
          docker pull ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }} &&
          docker tag ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }} gladiaio/gladia:latest &&
          docker push gladiaio/gladia:latest

  deploy-aipi-1:
    needs: promote-gladia-image
    runs-on: [self-hosted, linux, aipi-1]
    steps:
      - name: pull gladia image
        run: docker pull ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }}

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --restart unless-stopped \
            --gpus all --shm-size=5g \
            -p ${AIPI_SERVICE_PORT}:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${TRITON_SERVER_URL} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${HUGGINGFACE_ACCESS_TOKEN} \
            -e STABILITY_KEY=${STABILITY_KEY} \
            ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }}

      - name: Gladia AIPI-1 readiness
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 60
          max_attempts: 10
          retry_on: error
          command: curl localhost:${AIPI_SERVICE_PORT}/${AIPI_READINESS_PATH} --connect-timeout 5

  deploy-aipi-2:
    needs: deploy-aipi-1
    runs-on: [self-hosted, linux, aipi-2]
    steps:
      - name: pull gladia image
        run: docker pull ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }}

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --restart unless-stopped \
            --gpus all --shm-size=5g \
            -p ${AIPI_SERVICE_PORT}:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${TRITON_SERVER_URL} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${HUGGINGFACE_ACCESS_TOKEN} \
            -e STABILITY_KEY=${STABILITY_KEY} \
            ${DOCKER_GLADIA_FQDN}/gladia/gladia:${{ env.TAG_PROMOTE }}

      - name: Gladia AIPI-2 readiness
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 60
          max_attempts: 10
          retry_on: error
          command: curl localhost:${AIPI_SERVICE_PORT}/${AIPI_READINESS_PATH} --connect-timeout 5