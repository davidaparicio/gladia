name: Gladia Builder

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  DOCKER_BUILD_CACHE: ""
  DOCKER_BUILD_TAG: ci-${{ github.event.pull_request.number }}
  DOCKER_BUILD_ARGS_GLADIA_BASE_IMAGE: ${DOCKER_GLADIA_FQDN}/gladia-base:latest
  DOCKER_GLADIA_BUILD_NEEDED: false
  DOCKER_BASE_BUILD_NEEDED: false
  TEST_DEFAULT_MODELS_ONLY: '--default-models-only'
  TEST_DEFAULT_TEST_ONLY: '--default-inputs-only'
  TEST_STOP_AT_FAIL: '-x'
  TEST_MARKERS: '-m mandatory'

jobs:
  
  # if a pull request check the title using a pr linter
  lint:
    if: github.event_name == 'pull_request'
    uses: gladiaio/gladia/.github/workflows/pr-linter.yml@main

  # build the gladia image for the pull request breanch
  build:
    needs: [lint]
    if: |
        !contains(github.event.pull_request.labels.*.name, 'ci') &&
        !contains(github.event.pull_request.labels.*.name, 'doc')
    runs-on: [self-hosted, linux, STD, builder]
    # map steps output to job output
    outputs:
      dockerimage: ${{ steps.setoutput.outputs.dockerimage }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
         
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v29.0.3
          
      # if base.Dockefile changed we need to rebuild the base image
      - name: Check if base.Dockerfile must be rebuilt
        if: |
          contains(steps.changed-files.outputs.modified_files, 'base.Dockerfile') ||
          contains(steps.changed-files.outputs.deleted_files, 'base.Dockerfile') ||
          contains(github.event.pull_request.labels.*.name, 'ci: force-base-build')
        run: |
          echo "DOCKER_BASE_BUILD_NEEDED=true" >> $GITHUB_ENV
          echo "DOCKER_GLADIA_BUILD_NEEDED=true" >> $GITHUB_ENV

      - name: Label the PR if gladia-base needs a rebuild
        uses: actions-ecosystem/action-add-labels@v1
        if: |
          env.DOCKER_BASE_BUILD_NEEDED == 'true'
        with:
          labels: 'ci: build-base'
          
      # if env.yaml was changed we need to rebuild micromamba envs or
      # if gpu.Dockefile changed we need to rebuild the gladia image
      - name: Check if gpu.Dockerfile must be rebuilt
        if: |
          contains(steps.changed-files.outputs.modified_files, 'env.yaml') ||
          contains(steps.changed-files.outputs.deleted_files, 'env.yaml') ||
          contains(steps.changed-files.outputs.modified_files, 'gpu.Dockerfile') ||
          contains(steps.changed-files.outputs.deleted_files, 'gpu.Dockerfile') ||
          contains(github.event.pull_request.labels.*.name, 'ci: force-gladia-build')
        run: |
          echo "DOCKER_GLADIA_BUILD_NEEDED=true" >> $GITHUB_ENV

      # override DOCKER_BUILD_CACHE if "ci: force-no-cache" in labels
      - name: Force docker cache invalidation
        id: set-cache-option
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: force-no-cache')
        run: |
          echo "DOCKER_BUILD_CACHE=--no-cache" >> $GITHUB_ENV

      # if label is build-base or base.Dockerfile changed :
      # build the base image
      # push the base image to the gladia registry
      # change: DOCKER_BUILD_ARGS_GLADIA_BASE_IMAGE to the new base image
      - name: Build, Push and Tag Gladia Base image if label is build-base or base.Dockerfile changed
        id: build-base
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: build-base') ||
          env.DOCKER_BASE_BUILD_NEEDED == 'true'
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: >-
          docker build --pull	
          ${{env.DOCKER_BUILD_CACHE}}
          -t ${DOCKER_GLADIA_FQDN}/gladia-base:${{env.DOCKER_BUILD_TAG}}
          -f base.Dockerfile
          . &&
          docker push ${DOCKER_GLADIA_FQDN}/gladia-base:${{env.DOCKER_BUILD_TAG}} &&
          echo "DOCKER_BUILD_ARGS_GLADIA_BASE_IMAGE=${DOCKER_GLADIA_FQDN}/gladia-base:${{env.DOCKER_BUILD_TAG}}" >> $GITHUB_ENV

      # if label is force-build-gladia or gpu.Dockerfile or *env.yaml changed :
      # build the gladia image
      # push the gladia image to the gladia registry
      - name: Build, Push and Tag Gladia image if label is force-build-gladia or gpu.Dockerfile or env.yaml changed
        id: build-force-gladia
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: force-build-gladia') ||
          env.DOCKER_GLADIA_BUILD_NEEDED == 'true'
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: >-
          docker build --pull	${{env.DOCKER_BUILD_CACHE}}
          --build-arg GLADIA_BASE_IMAGE=${{env.DOCKER_BUILD_ARGS_GLADIA_BASE_IMAGE}}
          -t ${DOCKER_GLADIA_FQDN}/gladia:${{env.DOCKER_BUILD_TAG}}
          -f gpu.Dockerfile
          . &&
          docker push ${DOCKER_GLADIA_FQDN}/gladia:${{env.DOCKER_BUILD_TAG}}

      # if label is not force-build-gladia and gpu.Dockerfile nor *env.yaml changed :
      - name: Push and Tag Gladia image if label is not force-build-gladia nor gpu.Dockerfile nor env.yaml changed
        id: build-noforce-gladia
        if: |
          !contains(github.event.pull_request.labels.*.name, 'ci: force-build-gladia') &&
          env.DOCKER_GLADIA_BUILD_NEEDED == 'false'
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: |-
          { docker build --pull ${{env.DOCKER_BUILD_CACHE}}	-t ${DOCKER_GLADIA_FQDN}/gladia:${{env.DOCKER_BUILD_TAG}} -f - . <<-EOF
              FROM ${DOCKER_GLADIA_FQDN}/gladia:latest
              COPY . /app/
              ENTRYPOINT ["micromamba", "run", "-n", "server"]
              CMD ["/app/run_server.sh"]
          EOF
          } && docker push ${DOCKER_GLADIA_FQDN}/gladia:${{env.DOCKER_BUILD_TAG}}

      - name: Set output for later jobs
        id: setoutput
        run: |
          echo ::set-output name=dockerimage::${{env.DOCKER_BUILD_TAG}}

  test:
    needs: build
    if: |
        !contains(github.event.pull_request.labels.*.name, 'ci') &&
        !contains(github.event.pull_request.labels.*.name, 'doc')
    runs-on: [self-hosted, linux, GPU, tester]
    timeout-minutes: 90
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      # retrieve the image built in the previous job
      - name: Retrieve image built in previous job
        id: retrieve-image
        run: echo ${{ needs.build.outputs.dockerimage }}
          
      # set the GPU device to use based on the runner label
      - name: Get GPU ID
        id: gpuid
        run: |
          N=$(echo ${{ runner.name }} )
          if [[ ${N: -1} =~ [0-9] ]]; then 
            echo ::set-output name=gpuid::$(echo ${N: -1} )
          else 
            echo "Error : unexpected GPU ID"
            exit 1
          fi
          
      - name: Set log debug Level
        id: set-log-debug-lvl
        working-directory: ./src
        run: >-
          sed -i 's/"log_level": "info",/"log_level": "debug",/' config.json

      - name: Set env variables to select which tests to execute
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: force-execute-all-test')
        id: set-test-env-continue
        run: |
          echo "TEST_MARKERS=" >> $GITHUB_ENV

      - name: Set env variables to select inputs to test
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: force-test-all-inputs')
        id: set-test-env-continue
        run: |
          echo "TEST_DEFAULT_INPUTS_ONLY=" >> $GITHUB_ENV

      - name: Set env variables for tests break conditions
        if: |
          contains(github.event.pull_request.labels.*.name, 'ci: test-continue-when-fail')
        id: set-test-env-continue
        run: |
          echo "TEST_STOP_AT_FAIL=" >> $GITHUB_ENV

      - name: Set env variables to select which models to test
        if: |
          !contains(github.event.pull_request.labels.*.name, 'ci: force-test-all-models')
        id: set-test-env-all
        run: |
          echo "TEST_DEFAULT_MODELS_ONLY=" >> $GITHUB_ENV

      # TODO: make sure TRITON_SERVER_URL exists in runnenv
      - name: Test Gladia Container
        id: test-gladia
        working-directory: ./src
        run: >-
          docker run -d
          --cpus 14
          --memory 32g
          --gpus all
          --shm-size=5g
          -e HUGGINGFACE_ACCESS_TOKEN=${HUGGINGFACE_ACCESS_TOKEN}
          -e STABILITY_KEY=${STABILITY_KEY}
          -e NVIDIA_VISIBLE_DEVICES=${{steps.gpuid.outputs.gpuid}}
          -e CUDA_VISIBLE_DEVICES=${{steps.gpuid.outputs.gpuid}}
          -e TRITON_SERVER_PORT_HTTP=8000
          -e TRITON_SERVER_URL=${TRITON_SERVER_URL}
          -e TEST_DEFAULT_MODELS_ONLY=${{ env.TEST_DEFAULT_MODELS_ONLY }}
          -e TEST_DEFAULT_INPUTS_ONLY=${{ env.TEST_DEFAULT_INPUTS_ONLY }}
          -e TEST_STOP_AT_FAIL=${{ env.TEST_STOP_AT_FAIL }}
          -e TEST_MARKERS=${{ env.TEST_MARKERS }}
          -p ${{steps.gpuid.outputs.gpuid}}8000:8000
          -v /data/volumes/:/tmp/gladia/
          --pull always
          --name test-pr-${{ github.event.pull_request.number }}
          ${DOCKER_GLADIA_FQDN}/gladia:${{ needs.build.outputs.dockerimage }}
          /bin/bash -c 'cd /app/src/ && python -m pytest apis/ $TEST_DEFAULT_MODELS_ONLY $TEST_DEFAULT_TEST_ONLY $TEST_STOP_AT_FAIL $TEST_MARKERS'
        
      - name: Logs
        id: logs
        if: always()
        run: |
           docker logs test-pr-${{ github.event.pull_request.number }}

      # we need to docker run to remove root artefact directories
      # this should be done better in the future.
      - name: Clean Docker Test Env
        id: clean
        if: always()
        continue-on-error: True
        run: >-
          docker stop test-pr-${{ github.event.pull_request.number }} &&
          docker run -d -v $PWD:/app ${DOCKER_GLADIA_FQDN}/gladia:${{ needs.build.outputs.dockerimage }} bash -c 'rm -rf /app' &&
          docker rm test-pr-${{ github.event.pull_request.number }}
